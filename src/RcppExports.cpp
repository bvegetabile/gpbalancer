// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// construct_sqexp
NumericMatrix construct_sqexp(NumericMatrix X, NumericMatrix M, double sig, double noise);
RcppExport SEXP _gpbalancer_construct_sqexp(SEXP XSEXP, SEXP MSEXP, SEXP sigSEXP, SEXP noiseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< double >::type noise(noiseSEXP);
    rcpp_result_gen = Rcpp::wrap(construct_sqexp(X, M, sig, noise));
    return rcpp_result_gen;
END_RCPP
}
// sqexp_ard
arma::mat sqexp_ard(arma::mat X, arma::rowvec hyperparams, double scale, double noise);
RcppExport SEXP _gpbalancer_sqexp_ard(SEXP XSEXP, SEXP hyperparamsSEXP, SEXP scaleSEXP, SEXP noiseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type hyperparams(hyperparamsSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type noise(noiseSEXP);
    rcpp_result_gen = Rcpp::wrap(sqexp_ard(X, hyperparams, scale, noise));
    return rcpp_result_gen;
END_RCPP
}
// sqexp_common
arma::mat sqexp_common(arma::mat X, double lengthscale, double scale, double noise);
RcppExport SEXP _gpbalancer_sqexp_common(SEXP XSEXP, SEXP lengthscaleSEXP, SEXP scaleSEXP, SEXP noiseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type lengthscale(lengthscaleSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type noise(noiseSEXP);
    rcpp_result_gen = Rcpp::wrap(sqexp_common(X, lengthscale, scale, noise));
    return rcpp_result_gen;
END_RCPP
}
// polykernel
arma::mat polykernel(arma::mat X, double sig_zero, int pwr, double scale, double noise);
RcppExport SEXP _gpbalancer_polykernel(SEXP XSEXP, SEXP sig_zeroSEXP, SEXP pwrSEXP, SEXP scaleSEXP, SEXP noiseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type sig_zero(sig_zeroSEXP);
    Rcpp::traits::input_parameter< int >::type pwr(pwrSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type noise(noiseSEXP);
    rcpp_result_gen = Rcpp::wrap(polykernel(X, sig_zero, pwr, scale, noise));
    return rcpp_result_gen;
END_RCPP
}
// par_ep
List par_ep(arma::vec y, arma::mat cov_matrix, double tol, int max_iters, bool verbose);
RcppExport SEXP _gpbalancer_par_ep(SEXP ySEXP, SEXP cov_matrixSEXP, SEXP tolSEXP, SEXP max_itersSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov_matrix(cov_matrixSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iters(max_itersSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(par_ep(y, cov_matrix, tol, max_iters, verbose));
    return rcpp_result_gen;
END_RCPP
}
// seq_ep
List seq_ep(arma::vec y, arma::mat cov_matrix, double tol, int max_iters, bool verbose);
RcppExport SEXP _gpbalancer_seq_ep(SEXP ySEXP, SEXP cov_matrixSEXP, SEXP tolSEXP, SEXP max_itersSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov_matrix(cov_matrixSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iters(max_itersSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(seq_ep(y, cov_matrix, tol, max_iters, verbose));
    return rcpp_result_gen;
END_RCPP
}
// par_sqexp
arma::mat par_sqexp(arma::mat design_x, arma::vec vec_theta, double sig_noise);
RcppExport SEXP _gpbalancer_par_sqexp(SEXP design_xSEXP, SEXP vec_thetaSEXP, SEXP sig_noiseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type design_x(design_xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type vec_theta(vec_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type sig_noise(sig_noiseSEXP);
    rcpp_result_gen = Rcpp::wrap(par_sqexp(design_x, vec_theta, sig_noise));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gpbalancer_construct_sqexp", (DL_FUNC) &_gpbalancer_construct_sqexp, 4},
    {"_gpbalancer_sqexp_ard", (DL_FUNC) &_gpbalancer_sqexp_ard, 4},
    {"_gpbalancer_sqexp_common", (DL_FUNC) &_gpbalancer_sqexp_common, 4},
    {"_gpbalancer_polykernel", (DL_FUNC) &_gpbalancer_polykernel, 5},
    {"_gpbalancer_par_ep", (DL_FUNC) &_gpbalancer_par_ep, 5},
    {"_gpbalancer_seq_ep", (DL_FUNC) &_gpbalancer_seq_ep, 5},
    {"_gpbalancer_par_sqexp", (DL_FUNC) &_gpbalancer_par_sqexp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_gpbalancer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
